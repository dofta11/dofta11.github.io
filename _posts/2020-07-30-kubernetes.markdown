---
layout: post
title:  "Kubernetes 담아보기"
date:   2020-07-30 22:16:28 +0900
categories: tech
---
<div align="center">
    <img src="/assets/img/container-orchestration.png" />
</div>

<br/>

---

<br/>

오늘의 주제는 컨테이너 오케스트레이션 서비스인 `Kubernetes(k8s)` 이다.

현 시점, `마이크로서비스`를 구현하기 위한 가장 적절한 솔루션은 `컨테이너` 환경이라고 많이들 얘기한다. 
쿠버네티스는 이런 컨테이너 운영환경을 오케스트레이션하기 위한 솔루션이다.

구글을 일찍이 내부적으로는 컨테이너로 운영을 하고 있었고, 이 서비스를 `Borg` 라고 한다.
이 서비스를 오픈소스화 한 것이 쿠버네티스이다.      

필자는 [쿠버네티스 공식 문서](https://kubernetes.io/docs/home/) 를 참고하여 쿠버네티스에 대해 하나하나씩 파헤쳐 볼 예정이다.


## Kubernetes Object?

쿠버네티스 오브젝트는 클러스터의 상태를 나타내기 위한 *영속성(Persistence)을 갖고 있는 객체이다.

    - 어떤 컨테이너화된 애플리케이션이 동작중인지
    - 해당 컨테이너는 어떤 노드에서 동작 중인지
    - 그 애플리케이션이 이용할 수 있는 리소스(Pod, Service, Replication Controller 등)에 대한 기술
    - 그 애플리케이션이 어떠한 재구동 정책, 업그레이드, *내고장성(Fault Tolerant) 룰 등에 대한 정책을 기술

즉, `쿠버네티스 오브젝트`는 내가 클러스터에 대해 의도한 상태를 담고 있는 객체!

## 쿠버네티스 명세(spec)와 상태(status)

`spec` 은 오브젝트를 생성할때, 리소스에 의도한 상태에 대한 설명이다. 즉, 어떠한 상태를 의도하는지에 대한 설명이다. 오브젝트를 생성하기 위해서는 의도한 상태를 기술한 spec을 제시해야한다.

`status` 는 오브젝트의 현재 상태를 의미한다. 오브젝트의 실제 상태와 의도한 상태를 일치시키기 위해 끊임없이 관리된다.

###### *Persistence : 영속성, 지속성, 간단하게 "영구적으로 저장하는 환경"
###### *Fault Tolerant(내고장성) : 결함(fault) 또는 고장(failure)이 발생하여도 정상적 혹은 부분적으로 기능을 수행할 수 있는 시스템

## 라벨과 셀렉터

`label` 은 `selector`와 함께 사용되며, 쿠버네티스의 리소스를 선택하는데 사용된다.
쿠버네티스 오브젝트들을 Loose Coupling(느슨한 결합) 방식으로 매핑할 수 있다.
    
라벨은 쿠버네티스 내에서 Controller들이 Pod를 관리할때 자신이 관리해야할 Pod를 구분할 수 있는 키 역할을 한다.
Controller와 Pod를 느슨하게 결합하는 이런 특징 때문에 쿠버네티스가 Pod들을 관리할 때 유연성을 가질 수가 있다.

라벨을 설정했으면 특정 라벨들만 선택해서 그 라벨에 해당하는 자원들만 관리할수가 있다.
이렇게 라벨을 선택할때 사용하는게 라벨 셀렉터(Label selector)이다.
 
라벨 예시
    
    - "release" : "stable", "release" : "alpha"
    - "environment" : "dev", "environment" : "qa", "environment" : "production"

 
## 노드(Node)

쿠버네티스 전체를 관리하는 컨트롤러로써 `Master Node` 가 있으며, Pod(컨테이너를 포함한)가 배포되는 머신인 `Worker Node` 가 있다.
이러한 노드 머신들은 환경에 따라 가상의 머신일 수도 있으며, 물리 머신일 수 있다.

## 파드(Pod)
파드는 쿠버네티스 애플리케이션의 기본 실행 단위이며, 쿠버네티스 객체 모델 중 가장 작은 단위의 배포 가능한 객체이다.
즉, 파드 단위로 배포(Deployment)된다는 의미이다.

파드는 설계하기에 따라 `단일컨테이너 파드`, `다중컨테이너 파드` 로 구성할 수 있다. 
필자는 다중컨테이너 파드로, `웹서버와 애플리케이션서버, 로그파이프라인 사이드카 컨테이너 등` 구성으로 토이프로젝트를 진행한 경험이 있다.
아직 컨테이너 운영환경에 대한 실무 경험이 부족한 필자의 개인적인 생각으로는 위의 구성은 강하게 결합된 느낌으로 별로 좋아 보이진 않았다. 
실무에서 파드를 어떻게 구성하는지는 아마, 이번에 옮긴 회사에서 경험할 수 있을 듯하다. (이후에 추가로 포스팅 하자) 
    
    - 파드 네트워킹
    각각의 파드는 고유한 IP 주소를 할당 받는다. 한 파드 내부의 모든 컨테이너는 네트워크 네임스페이스와 IP주소 및 네트워크 포트를 공유한다. 
    파드 안에 있는 컨테이너는 다른 컨테이너와 localhost 를 통해서 통신할 수 있다.


#### 파드 라이프사이클

파드 phase

    Pending	: 파드가 쿠버네티스 시스템에 의해서 승인되었지만, 파드를 위한 하나 또는 하나 이상의 컨테이너 이미지 생성이 아직 완료되지 않았다. 여기에는 스케줄되기 이전까지의 시간 뿐만 아니라 오래 걸릴 수 있는 네트워크를 통한 이미지 다운로드 시간도 포함된다.	
    Running : 파드가 한 노드에 결합되었고, 모든 컨테이너들의 생성이 완료되었다. 적어도 하나의 컨테이너가 동작 중이거나, 시작 또는 재시작 중에 있다.	
    Succeeded : 파드에 있는 모든 컨테이너들이 성공으로 종료되었고, 재시작되지 않을 것이다.	
    Failed : 파드에 있는 모든 컨테이너들이 종료되었고, 적어도 하나 이상의 컨테이너가 실패로 종료되었다. 즉, 해당 컨테이너는 non-zero 상태로 빠져나왔거나(exited) 시스템에 의해서 종료(terminated)되었다.	
    Unknown : 어떤 이유에 의해서 파드의 상태를 얻을 수 없다. 일반적으로 파드 호스트와의 통신 오류에 의해서 발생한다.

Probe : kubelet에 의해 주기적으로 수행되는 진단 

    - livenessProbe : 컨테이너가 정상 동작 중인지 여부를 나타낸다.
    - readinessProbe : 컨테이너가 요청을 처리할 준비가 되었는지 여부.
    - startupProbe : 컨테이너 내의 애플리케이션이 시작되었는지를 나타낸다.
    
    
## 컨트롤러

컨트롤러는 쿠버네티스 오브젝트가 설정된 상태를 잘 유지할수있게 관리하는 역할을 한다.

### 레플리카셋

레플리카셋은 설정한 파드 개수만큼 파드가 항상 유지될 수 있도록 관리한다. 
즉 레플리카셋을 3개로 설정한 경우, 항상 3개의 파드가 실행 유지되며 만약 1개의 파드가 어떠한 이슈로 중지되었다면, 
레플리카셋은 즉시 1개의 파드를 생성하여 3개를 유지하도록 한다.


    
